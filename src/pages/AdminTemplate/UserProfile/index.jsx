import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { useMutation } from "@tanstack/react-query";
import z from "zod";
import { updateUser } from "../../../services/user.api";
import { setProfile } from "../../../store/user.slice";
import { toast } from "react-toastify";
import { FaUserCircle } from "react-icons/fa";

// ‚úÖ Schema validate v·ªõi zod
const schema = z.object({
  hoTen: z.string().nonempty("H·ªç t√™n b·∫Øt bu·ªôc.").min(2, "√çt nh·∫•t 2 k√Ω t·ª±."),
  email: z.string().email("Email kh√¥ng h·ª£p l·ªá."),
  soDT: z
    .string()
    .regex(/^[0-9]+$/, "Ch·ªâ nh·∫≠p s·ªë ƒëi·ªán tho·∫°i.")
    .nonempty("S·ªë ƒëi·ªán tho·∫°i b·∫Øt bu·ªôc."),
  matKhau: z
    .string()
    .min(6, "M·∫≠t kh·∫©u t·ªëi thi·ªÉu 6 k√Ω t·ª±.")
    .regex(
      /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z0-9])/,
      "C·∫ßn √≠t nh·∫•t 1 ch·ªØ hoa, 1 ch·ªØ th∆∞·ªùng, 1 s·ªë & 1 k√Ω t·ª± ƒë·∫∑c bi·ªát."
    ),
  taiKhoan: z.string().nonempty("T√†i kho·∫£n b·∫Øt bu·ªôc."),
  maNhom: z.string().nonempty("M√£ nh√≥m b·∫Øt bu·ªôc."),
  maLoaiNguoiDung: z.string().nonempty("M√£ lo·∫°i ng∆∞·ªùi d√πng b·∫Øt bu·ªôc."),
});


export default function UserProfile() {
  const dispatch = useDispatch();
  const { profile } = useSelector((state) => state.userSlice);
  const [isEditing, setIsEditing] = useState(false);

  // ‚úÖ l·∫•y user t·ª´ localStorage n·∫øu redux r·ªóng
  useEffect(() => {
    if (!profile) {
      const storedUser = localStorage.getItem("user");
      if (storedUser) {
        dispatch(setProfile(JSON.parse(storedUser)));
      }
    }
  }, [profile, dispatch]);

  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm({
    defaultValues: profile,
    resolver: zodResolver(schema),
  });

  // ‚úÖ reset form khi profile thay ƒë·ªïi
  useEffect(() => {
    if (profile) {
      reset(profile);
    }
  }, [profile, reset]);
const { mutate: handleUpdateInfo, isPending } = useMutation({
  mutationFn: updateUser,
  onSuccess: (res) => {
    console.log("üçÉ API tr·∫£ v·ªÅ:", res);
    alert(res.message || res.content); // ‚úÖ th√¥ng b√°o lu√¥n

    if (res.statusCode === 200) {
      dispatch(setProfile(res.content));
      localStorage.setItem("user", JSON.stringify(res.content));
      toast.success(res.message);
      setIsEditing(false);
    }
  },
  onError: (err) => {
    console.error("üçÉ L·ªói API:", err);
    alert(err.content || err.message || "C√≥ l·ªói x·∫£y ra!"); // ‚úÖ b·∫Øt ƒë∆∞·ª£c message content t·ª´ BE
  },
});



 const onSubmit = (values) => {
  const payload = {
    taiKhoan: values.taiKhoan,
    matKhau: values.matKhau,
    email: values.email,
    soDt: values.soDT, // ‚ö† map ƒë√∫ng t√™n tr∆∞·ªùng backend
    maNhom: values.maNhom,
    maLoaiNguoiDung: values.maLoaiNguoiDung,
    hoTen: values.hoTen,
  };
  console.log("üöÄ Payload g·ª≠i ƒëi:", payload);
  handleUpdateInfo(payload);
};


  if (!profile) {
    return (
      <p className="text-center mt-10 text-gray-600">
        Ch∆∞a c√≥ th√¥ng tin ng∆∞·ªùi d√πng
      </p>
    );
  }

  return (
    <div
      className="max-w-2xl mx-auto mt-10 p-8 rounded-2xl shadow-lg border"
      style={{ background: "linear-gradient(to bottom, #1A2A80, #B2B0E8)" }}
    >
      {/* Avatar + Title */}
      <div className="flex flex-col items-center">
        <FaUserCircle className="text-white text-6xl" />
        <h2 className="text-2xl font-bold mt-3 text-white">
          Th√¥ng tin c√° nh√¢n
        </h2>
        <p className="text-gray-200">{profile.email}</p>
      </div>

      <div className="mt-6">
        {!isEditing ? (
          <div className="space-y-4">
            <div className="grid grid-cols-2 gap-3">
              <InfoItem label="H·ªç t√™n" value={profile.hoTen} />
              <InfoItem label="S·ªë ƒëi·ªán tho·∫°i" value={profile.soDT} />
              <InfoItem label="T√†i kho·∫£n" value={profile.taiKhoan} />
              <InfoItem label="M√£ nh√≥m" value={profile.maNhom} />
              <InfoItem
                label="Lo·∫°i ng∆∞·ªùi d√πng"
                value={profile.maLoaiNguoiDung}
              />
            </div>

            <button
              onClick={() => setIsEditing(true)}
              className="w-full mt-6 py-2 rounded-lg text-white transition"
              style={{ backgroundColor: "#3B38A0" }}
            >
              C·∫≠p nh·∫≠t th√¥ng tin
            </button>
          </div>
        ) : (
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
            <FormField label="H·ªç t√™n" error={errors.hoTen?.message}>
              <input
                type="text"
                {...register("hoTen")}
                className="w-full p-2 rounded"
                style={{ borderColor: "#7A85C1" }}
              />
            </FormField>
            <FormField label="Email" error={errors.email?.message}>
              <input
                type="email"
                {...register("email")}
                className="w-full p-2 rounded"
                style={{ borderColor: "#7A85C1" }}
              />
            </FormField>
            <FormField label="S·ªë ƒêT" error={errors.soDT?.message}>
              <input
                type="text"
                {...register("soDT")}
                className="w-full p-2 rounded"
                style={{ borderColor: "#7A85C1" }}
              />
            </FormField>
            <FormField label="M·∫≠t kh·∫©u" error={errors.matKhau?.message}>
              <input
                type="password"
                {...register("matKhau")}
                className="w-full p-2 rounded"
                style={{ borderColor: "#7A85C1" }}
              />
            </FormField>
            <FormField label="M√£ nh√≥m" error={errors.maNhom?.message}>
              <input
                type="text"
                {...register("maNhom")}
                className="w-full p-2 rounded"
                style={{ borderColor: "#7A85C1" }}
              />
            </FormField>
            <FormField label="Lo·∫°i ng∆∞·ªùi d√πng">
              <input
                type="text"
                disabled
                {...register("maLoaiNguoiDung")}
                className="w-full p-2 rounded text-gray-200"
                style={{ backgroundColor: "#B2B0E8", borderColor: "#7A85C1" }}
              />
            </FormField>
            <FormField label="T√†i kho·∫£n">
              <input
                type="text"
                {...register("taiKhoan")}
                disabled
                className="w-full p-2 rounded text-gray-200"
                style={{ backgroundColor: "#B2B0E8", borderColor: "#7A85C1" }}
              />
            </FormField>

            <div className="flex gap-3 pt-4">
              <button
                type="submit"
                disabled={isPending}
                className="flex-1 py-2 rounded-lg text-white transition"
                style={{ backgroundColor: "#3B38A0" }}
              >
                {isPending ? "ƒêang l∆∞u..." : "L∆∞u thay ƒë·ªïi"}
              </button>
              <button
                type="button"
                onClick={() => setIsEditing(false)}
                className="flex-1 py-2 rounded-lg text-white transition"
                style={{ backgroundColor: "#7A85C1" }}
              >
                H·ªßy
              </button>
            </div>
          </form>
        )}
      </div>
    </div>
  );
}

// Component nh·ªè ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin d·∫°ng card row
function InfoItem({ label, value }) {
  return (
    <div className="p-3 bg-gray-50 rounded-lg border border-gray-200">
      <p className="text-xs text-gray-500">{label}</p>
      <p className="font-medium text-gray-800">{value}</p>
    </div>
  );
}

// Component nh·ªè cho form field
function FormField({ label, error, children }) {
  return (
    <div>
      <label className="block font-medium mb-1">{label}</label>
      {children}
      {error && <span className="text-red-600 text-sm">{error}</span>}
    </div>
  );
}
